-- Secure database schema with proper indexing and constraints

-- Users table with enhanced security fields
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    number VARCHAR(10) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) NULL,
    full_name VARCHAR(100) NULL,
    profile_image VARCHAR(255),
    status ENUM('active', 'inactive', 'banned', 'pending') DEFAULT 'pending',
    is_verified BOOLEAN DEFAULT FALSE,
    email_verified BOOLEAN DEFAULT FALSE,
    phone_verified BOOLEAN DEFAULT FALSE,
    
    -- Security tracking
    failed_login_attempts INT DEFAULT 0,
    last_failed_login TIMESTAMP NULL,
    account_locked_until TIMESTAMP NULL,
    password_reset_token VARCHAR(255) NULL,
    password_reset_expires TIMESTAMP NULL,
    verification_token VARCHAR(255) NULL,
    verification_expires TIMESTAMP NULL,
    
    -- Audit trail
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    last_login TIMESTAMP NULL,
    last_activity TIMESTAMP NULL,
    ip_address VARCHAR(45) NULL, -- Support IPv6
    user_agent TEXT NULL,
    
    -- Indexes for performance
    INDEX idx_number (number),
    INDEX idx_email (email),
    INDEX idx_status (status),
    INDEX idx_created_at (created_at),
    INDEX idx_last_login (last_login)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Login attempts tracking table
CREATE TABLE IF NOT EXISTS login_attempts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    identifier VARCHAR(100) NOT NULL, -- Can be IP, username, etc.
    attempt_type ENUM('login', 'signup', 'password_reset') NOT NULL,
    success BOOLEAN DEFAULT FALSE,
    ip_address VARCHAR(45) NOT NULL,
    user_agent TEXT NULL,
    attempted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    INDEX idx_identifier (identifier),
    INDEX idx_ip_address (ip_address),
    INDEX idx_attempted_at (attempted_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Security events log table
CREATE TABLE IF NOT EXISTS security_logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NULL,
    event_type VARCHAR(50) NOT NULL,
    event_description TEXT NULL,
    ip_address VARCHAR(45) NULL,
    user_agent TEXT NULL,
    additional_data JSON NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,
    INDEX idx_user_id (user_id),
    INDEX idx_event_type (event_type),
    INDEX idx_created_at (created_at),
    INDEX idx_ip_address (ip_address)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Sessions table for database session storage (optional but recommended)
CREATE TABLE IF NOT EXISTS user_sessions (
    session_id VARCHAR(128) NOT NULL PRIMARY KEY,
    user_id INT NULL,
    ip_address VARCHAR(45) NOT NULL,
    user_agent TEXT NULL,
    session_data LONGTEXT NULL,
    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    expires_at TIMESTAMP NOT NULL,
    
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    INDEX idx_user_id (user_id),
    INDEX idx_expires_at (expires_at),
    INDEX idx_last_activity (last_activity)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table: Products
CREATE TABLE `products` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `category` varchar(100) DEFAULT NULL,
  `price` decimal(10,2) DEFAULT NULL,
  `difficulty` enum('Beginner','Intermediate','Advanced') DEFAULT NULL,
  `rating` decimal(2,1) DEFAULT NULL,
  `duration` varchar(50) DEFAULT NULL,
  `description` text,
  `image` varchar(500) DEFAULT NULL,
  `featured` tinyint(1) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci

-- Table: Product Technologies (many-to-one relationship with products)
CREATE TABLE product_technologies (
    product_id INT,
    technology VARCHAR(100),
    FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
);

-- Table: Wishlist (to allow users to save favorite products)
CREATE TABLE wishlist (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    product_id INT NOT NULL,
    added_on DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE,
    UNIQUE (user_id, product_id)
);

-- Table: Cart (supports both download and delivery options)
CREATE TABLE cart (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT DEFAULT 1,
    purchase_type ENUM('download', 'delivery') NOT NULL,
    added_on DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('pending', 'ordered', 'cancelled') DEFAULT 'pending',
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
);

-- Table: Delivery Details (only applicable if purchase_type is 'delivery')
CREATE TABLE delivery_details (
    id INT AUTO_INCREMENT PRIMARY KEY,
    cart_id INT,
    full_name VARCHAR(150),
    address TEXT,
    city VARCHAR(100),
    pincode VARCHAR(10),
    phone VARCHAR(15),
    delivery_status ENUM('pending', 'shipped', 'delivered') DEFAULT 'pending',
    FOREIGN KEY (cart_id) REFERENCES cart(id) ON DELETE CASCADE
);

-- Table: Orders (manages lifecycle of placed orders)
CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT DEFAULT 1,
    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    order_status ENUM('placed', 'processing', 'pending', 'shipped', 'completed', 'delivered', 'cancelled') DEFAULT 'placed',
    purchase_type ENUM('download', 'delivery') NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
);

-- Payment methods table
CREATE TABLE payment_methods (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    type ENUM('card', 'upi', 'netbanking', 'wallet') NOT NULL,
    provider VARCHAR(50), -- Razorpay, Stripe, PayPal, etc.
    last_four VARCHAR(4),
    is_default BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Payment transactions table
CREATE TABLE payment_transactions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    payment_method_id INT,
    transaction_id VARCHAR(100) UNIQUE,
    gateway_response JSON,
    amount DECIMAL(10,2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'INR',
    status ENUM('pending', 'processing', 'completed', 'failed', 'refunded') DEFAULT 'pending',
    gateway VARCHAR(50), -- razorpay, stripe, etc.
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
    FOREIGN KEY (payment_method_id) REFERENCES payment_methods(id) ON DELETE SET NULL
);

-- Create a stored procedure to clean expired data PENDING FROM HERE
DELIMITER //
CREATE PROCEDURE CleanExpiredData()
BEGIN
    -- Clean expired login attempts (older than 24 hours)
    DELETE FROM login_attempts 
    WHERE attempted_at < DATE_SUB(NOW(), INTERVAL 24 HOUR);
    
    -- Clean expired sessions
    DELETE FROM user_sessions 
    WHERE expires_at < NOW();
    
    -- Clean old security logs (older than 90 days)
    DELETE FROM security_logs 
    WHERE created_at < DATE_SUB(NOW(), INTERVAL 90 DAY);
    
    -- Reset failed login attempts for unlocked accounts
    UPDATE users 
    SET failed_login_attempts = 0, 
        last_failed_login = NULL 
    WHERE account_locked_until IS NOT NULL 
    AND account_locked_until < NOW();
    
    -- Clear expired password reset tokens
    UPDATE users 
    SET password_reset_token = NULL, 
        password_reset_expires = NULL 
    WHERE password_reset_expires IS NOT NULL 
    AND password_reset_expires < NOW();
    
    -- Clear expired verification tokens
    UPDATE users 
    SET verification_token = NULL, 
        verification_expires = NULL 
    WHERE verification_expires IS NOT NULL 
    AND verification_expires < NOW();
END //
DELIMITER ;

-- Create an event to run cleanup daily
CREATE EVENT IF NOT EXISTS daily_cleanup
ON SCHEDULE EVERY 1 DAY
STARTS CURRENT_TIMESTAMP
DO CALL CleanExpiredData();

-- Sample queries for monitoring security

-- Check for suspicious login patterns
-- SELECT ip_address, COUNT(*) as attempts, 
--        MAX(attempted_at) as last_attempt
-- FROM login_attempts 
-- WHERE success = FALSE 
-- AND attempted_at > DATE_SUB(NOW(), INTERVAL 1 HOUR)
-- GROUP BY ip_address 
-- HAVING attempts > 10;

-- Check for multiple failed logins from same IP
-- SELECT ip_address, identifier, COUNT(*) as failed_attempts
-- FROM login_attempts 
-- WHERE success = FALSE 
-- AND attempted_at > DATE_SUB(NOW(), INTERVAL 1 DAY)
-- GROUP BY ip_address, identifier
-- ORDER BY failed_attempts DESC;

-- Monitor account lockouts
-- SELECT number, failed_login_attempts, last_failed_login, account_locked_until
-- FROM users 
-- WHERE account_locked_until > NOW() 
-- OR failed_login_attempts > 3;

News Letter table 
CREATE TABLE IF NOT EXISTS newsletter_subscribers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    subscribed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ip_address VARCHAR(45) NULL,
    user_agent TEXT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
